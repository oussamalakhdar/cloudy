---
- name: Deploy the app on EC2 
  hosts: localhost
  gather_facts: no
  vars:
    key_name: "cloud1-key-pair"          
    private_key_path: "~/.ssh/cloud1-key-pair.pem"  
    region: "us-east-1"                     
    instance_type: "t2.micro"               
    ami_id: "ami-0c02fb55956c7d316"         
    vpc_cidr: "10.0.0.0/16"
    subnet_cidr: "10.0.1.0/24"             
    security_group_name: "the-app-sg"        

  tasks:
    - name: Create VPC
      amazon.aws.ec2_vpc_net:
        region: "{{ region }}"
        name: "the-app-vpc"
        cidr_block: "{{ vpc_cidr }}"
        state: present
      register: vpc

    - name: Create Public Subnet
      amazon.aws.ec2_vpc_subnet:
        region: "{{ region }}"
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: "{{ subnet_cidr }}"
        az: "us-east-1a"
        map_public: yes
        state: present
      register: subnet

    - name: Create Internet Gateway
      amazon.aws.ec2_vpc_igw:
        region: "{{ region }}"
        vpc_id: "{{ vpc.vpc.id }}"
        state: present
      register: igw

    - name: Create Route Table and Add Route to IGW
      amazon.aws.ec2_vpc_route_table:
        region: "{{ region }}"
        vpc_id: "{{ vpc.vpc.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
        subnets:
          - "{{ subnet.subnet.id }}"
        state: present
      register: route_table

    - name: Create Security Group
      amazon.aws.ec2_security_group:
        region: "{{ region }}"
        name: "{{ security_group_name }}"
        description: "Security group for the app on port 80 and SSH on port 22"
        vpc_id: "{{ vpc.vpc.id }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0            
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0              
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0              
      register: sg

    - name: Create EC2 instance in Public Subnet
      amazon.aws.ec2_instance:
        region: "{{ region }}"
        key_name: "{{ key_name }}"
        instance_type: "{{ instance_type }}"
        image_id: "{{ ami_id }}"
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        security_group: "{{ security_group_name }}"
        wait: yes
        count: 1
        state: present
        network_interfaces:
          - assign_public_ip: true
      register: ec2

    - name: Get public IP of the instance
      set_fact:
        public_ip: "{{ ec2.instances[0].network_interfaces[0].association.public_ip }}"

    - name: Wait for SSH to be available
      ansible.builtin.wait_for:
        host: "{{ public_ip }}"
        port: 22
        timeout: 300

    - name: Add the instance to the inventory
      add_host:
        name: "{{ public_ip }}"
        ansible_user: "ec2-user"           
        ansible_ssh_private_key_file: "{{ private_key_path }}"

- name: Configure and deploy the app on EC2 instance
  hosts: all
  become: yes
  vars:      
    docker_compose_dir: "~/Desktop/cloudy/inception/"
    
  tasks:
    - name: Install Python 3 using raw command
      ansible.builtin.raw: |
        sudo amazon-linux-extras enable python3.8
        sudo yum install -y python3
      register: python_install_result
      failed_when: python_install_result.rc != 0

    - name: Install Docker and Docker Compose using raw command
      ansible.builtin.raw: |
        sudo yum install -y docker
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
      register: docker_install_result
      failed_when: docker_install_result.rc != 0

    - name: Start and enable Docker service
      ansible.builtin.raw: |
        sudo systemctl start docker
        sudo systemctl enable docker
      register: docker_service_result
      failed_when: docker_service_result.rc != 0

    - name: Add user to Docker group
      ansible.builtin.user:
        name: ec2-user
        groups: docker
        append: yes

    - name: Create directory for Docker Compose files
      ansible.builtin.file:
        path: /home/ec2-user/app
        state: directory
        owner: ec2-user
        group: ec2-user

    - name: Copy Docker Compose files to the instance
      ansible.builtin.copy:
        src: "{{ docker_compose_dir }}/"
        dest: /home/ec2-user/app
        owner: ec2-user
        group: ec2-user

    - name: Run Docker Compose
      ansible.builtin.command:
        chdir: /home/ec2-user/app
        cmd: /usr/local/bin/docker-compose -f /home/ec2-user/app/docker-compose.yml up -d

    - name: Display the public IP of the instance
      ansible.builtin.debug:
        msg: "The public IP of the instance is {{ ansible_host }}"
